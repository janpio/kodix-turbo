// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  engineType      = "wasm"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model AppRole {
  id String @id @default(cuid())

  appId String
  App   App    @relation(fields: [appId], references: [id])

  name        String
  description String?
  minUsers    Int     @default(0)
  maxUsers    Int     @default(0)

  UserAppRole UserAppRole[]

  @@index([appId])
}

model UserAppRole {
  id String @id @default(cuid())

  userId String
  User   User   @relation(fields: [userId], references: [id])

  teamId String
  Team   Team   @relation(fields: [teamId], references: [id])

  appId String
  App   App    @relation(fields: [appId], references: [id])

  appRoleId String
  AppRole   AppRole @relation(fields: [appRoleId], references: [id])

  @@index([userId])
  @@index([teamId])
  @@index([appId])
  @@index([appRoleId])
}

model AppTeamConfig {
  id     String @id @default(cuid())
  config Json
  appId  String
  App    App    @relation("AppConfig", fields: [appId], references: [id])

  teamId String
  Team   Team   @relation("TeamConfig", fields: [teamId], references: [id])

  @@unique([appId, teamId])
  @@index([appId])
  @@index([teamId])
}

model Team {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Users     User[]   @relation("UserTeam")

  ownerId String
  Owner   User   @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  ActiveUsers  User[]        @relation("UserActiveTeam")
  ActiveApps   App[]         @relation("AppTeam")
  Todos        Todo[]
  EventMasters EventMaster[]
  Invitations  Invitation[]

  AppTeamConfigs AppTeamConfig[] @relation("TeamConfig")
  UserAppRoles   UserAppRole[]

  @@index([ownerId])
}

model Invitation {
  id        String   @id @default(cuid())
  Team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  email     String
  accepted  Boolean  @default(false) //Is this necessary? Since we just delete the invitation when the user accepts it
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teamId])
}

model App {
  id               String          @id @default(cuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  subscriptionCost Decimal
  ActiveTeams      Team[]          @relation("AppTeam")
  DevPartner       DevPartner      @relation(fields: [devPartnerId], references: [id])
  devPartnerId     String
  AppTeamConfigs   AppTeamConfig[] @relation("AppConfig")

  AppRoles     AppRole[]
  UserAppRoles UserAppRole[]

  @@index([devPartnerId])
}

model DevPartner {
  id         String   @id @default(cuid())
  name       String
  partnerUrl String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Apps       App[]
}

enum Status {
  TODO
  INPROGRESS
  INREVIEW
  DONE
  CANCELED
}

model Todo {
  id          String    @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  //** 0 - No Priority
  //** 1 - Low
  //** 2 - Medium
  //** 3 - High
  priority    Int? //0 1 - LOW, 2 - MEDIUM, 3 high
  category    String?
  status      Status?
  reminder    Boolean?

  assignedToUserId String?
  AssignedToUser   User?   @relation(fields: [assignedToUserId], references: [id])

  teamId String
  Team   Team   @relation(fields: [teamId], references: [id])

  @@index([teamId])
  @@index([assignedToUserId])
}

model EventMaster {
  id        String    @id @default(cuid())
  rule      String
  DateStart DateTime
  DateUntil DateTime?

  title       String?
  description String?

  EventExceptions    EventException[]
  EventCancellations EventCancellation[]
  EventDones         EventDone[]

  Team   Team   @relation(fields: [teamId], references: [id])
  teamId String

  @@index([teamId])
}

model EventException {
  id           String   @id @default(cuid())
  originalDate DateTime
  newDate      DateTime

  title       String?
  description String?

  EventMaster   EventMaster @relation(fields: [eventMasterId], references: [id], onDelete: Cascade)
  eventMasterId String

  @@index([eventMasterId])
}

model EventCancellation {
  id           String   @id @default(cuid())
  originalDate DateTime

  EventMaster   EventMaster @relation(fields: [eventMasterId], references: [id], onDelete: Cascade)
  eventMasterId String

  @@index([eventMasterId])
}

model EventDone {
  id           String   @id @default(cuid())
  eventDate    DateTime
  registerDate DateTime @default(now())
  done         Boolean
  details      String?

  DoneBy User   @relation(fields: [userId], references: [id])
  userId String

  EventMaster   EventMaster @relation(fields: [eventMasterId], references: [id])
  eventMasterId String

  title       String?
  description String?

  @@index([eventMasterId])
  @@index([userId])
}

model Post {
  id      String @id @default(cuid())
  title   String
  content String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  Accounts      Account[]
  Sessions      Session[]
  Teams         Team[]    @relation("UserTeam")
  Todos         Todo[]

  activeTeamId String
  ActiveTeam   Team   @relation("UserActiveTeam", fields: [activeTeamId], references: [id])

  EventDones   EventDone[]
  OwnedTeams   Team[]
  UserAppRoles UserAppRole[]

  @@index([activeTeamId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
